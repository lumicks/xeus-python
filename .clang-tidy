---
# In the following check list, make sure that every line ends with a comma, even the comments!
# clang-tidy accepts a comma separated list and then ignores the unknown checks (comments).
Checks: >
  # clang-tidy has some pre-defined checks: we disable everything and then enable what we need,
  -*,
  bugprone-*,
  # Gives us some false positives, not super important for us since everything can throw,
  -bugprone-exception-escape,
  # Warns about forward declarations in third-party libraries but those are out of our control,
  -bugprone-forward-declaration-namespace,
  # This one could be very useful but it requires a lot of API changes to implement -- not for now,
  -bugprone-easily-swappable-parameters,
  # The fixups for these need some thinking instead of just a mechanical replacement -- TODO,
  -bugprone-misplaced-widening-cast,
  -bugprone-implicit-widening-of-multiplication-result,
  # False positives (doesn't understand `REQUIRES` or `Expects`) and very performance intensive,
  -bugprone-unchecked-optional-access,
  cppcoreguidelines-*,
  # Same as the corresponding bugprone check exceptions (see above),
  -cppcoreguidelines-narrowing-conversions,
  # Same as the corresponding modernize check exceptions (see below),
  -cppcoreguidelines-avoid-magic-numbers,
  -cppcoreguidelines-avoid-c-arrays,
  -cppcoreguidelines-non-private-member-variables-in-classes,
  # Qt, logging, etc. we can't get away from macros just yet,
  -cppcoreguidelines-macro-usage,
  # Everyone: no owning raw pointers -- Qt: surprised Pikachu,
  # Triggers on `inspect`,
  -cppcoreguidelines-missing-std-forward,
  # Can trigger when the parameter is forwarded,
  -cppcoreguidelines-rvalue-reference-param-not-moved,
  -cppcoreguidelines-owning-memory,
  # Qt moc doesn't like these,
  -cppcoreguidelines-special-member-functions,
  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  -cppcoreguidelines-pro-bounds-constant-array-index,
  -cppcoreguidelines-pro-bounds-pointer-arithmetic,
  # Good to have but requires some extra work,
  -cppcoreguidelines-avoid-const-or-ref-data-members,
  # Nothing wrong with do-while and the fixes can be bug-prone,
  -cppcoreguidelines-avoid-do-while,
  misc-*,
  # Recursion happens,
  -misc-no-recursion,
  # Doesn't work with third-party lib requirements (Qt, pybind11 typecasers),
  -misc-non-private-member-variables-in-classes,
  # Triggered by third-party libs, complains that I can be confused with l, which is the case for terrible fonts,
  -misc-confusable-identifiers,
  # Breaks the build as different platforms often require different includes (typically the standard libraries),
  -misc-include-cleaner,
  modernize-*,
  # Qt moc doesn't like this,
  -modernize-avoid-c-arrays,
  # This check seems a bit outdated: value + move is not the default recommendation anymore,
  -modernize-pass-by-value,
  # This annotates nearly every function making it pointless,
  -modernize-use-nodiscard,
  # Very nice, but changes our entire code style so disabled for now,
  -modernize-use-trailing-return-type,
  # GCC11/libstdc++ produces a false positive on every comparison,
  -modernize-use-nullptr,
  performance-*,
  # A lot of effort to implement for the entire codebase and the performance advantage is minimal for us,
  -performance-enum-size,
  readability-*,
  # Fails on all Catch2 tests due to test macro overhead,
  -readability-function-cognitive-complexity,
  # Prevents nameless tag types,
  -readability-named-parameter,
  # `if (ptr)` is a fine way to check if a pointer is valid,
  -readability-implicit-bool-conversion,
  # This makes writing unit test very tedious,
  -readability-magic-numbers,
  # Kinda useless check: it requires you to write `1.0F` instead of `1.0f`,
  -readability-uppercase-literal-suffix,
  # This is an LLVM coding guideline that we don't care for,
  -readability-qualified-auto,
  # Good variable naming is important, but this check is too arbitrary to be useful,
  -readability-identifier-length,
  # Conflicts with a bugprone check that requires default initializers on everything,
  -readability-redundant-member-init,
  # The fix replaces a single const assignment with a mutable variable and an else-if tree which is worse,
  -readability-avoid-nested-conditional-operator,
  # Enforcing it everywhere can make the code less readable, leave it to the developer to decide when to use it,
  -modernize-use-designated-initializers,
  # Requires adding unnecessary parenthesis to math expressions,
  -readability-math-missing-parentheses,
  # ----> Project-specific rules after this point <----,
WarningsAsErrors: '*'
HeaderFilterRegex: '^.*\.h(pp)?$'
FormatStyle: file
CheckOptions:
- key: modernize-use-override.IgnoreDestructors
  value: 1
- key: cppcoreguidelines-pro-type-member-init.UseAssignment
  value: 1
- key: bugprone-narrowing-conversions.WarnOnEquivalentBitWidth
  value: 0
...
